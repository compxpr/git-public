Option Explicit

' ==== Visio numeric constants (avoid type library) ====
Private Const VIS_OPEN_RO As Long = 2          ' visOpenRO
Private Const VIS_FIT_PAGE As Long = 1         ' visFitPage

' ==== Public UDTs ====
Public Type StepDef
    SType As String       ' "PROC" | "DEC" | "TERM"
    Lane As Integer       ' 1..N (swimlane col) or 1=Requestor / 2=System (timeline row)
    Row As Integer        ' row ordinal (swimlane only)
    Caption As String
    Callout As Integer
    IsSystem As Boolean
    ShapeID As Long       ' filled at runtime
End Type

Public Type ConnDef
    FromIndex As Integer
    ToIndex As Integer
    LabelText As String
End Type

' ==== Layout / sizes ====
Private Const PAGE_W As Double = 8.5
Private Const PAGE_H As Double = 11#
Private Const MARGIN As Double = 1#
Private Const CONTENT_W As Double = PAGE_W - 2 * MARGIN
Private Const CONTENT_H As Double = PAGE_H - 2 * MARGIN

Private Const LANE_HDR_H As Double = 0.5
Private Const HDR_GAP As Double = 0.35
Private Const V_GAP As Double = 0.40
Private Const H_GAP As Double = 0.25
Private Const TIMELINE_LANE_SEP As Double = 2#   ' can be auto-inflated below

' Shape sizes (inches)
Private Const W_TERM As Double = 1.16, H_TERM As Double = 0.75
Private Const W_PROC As Double = 1.20, H_PROC As Double = 0.75
Private Const W_DEC  As Double = 1.20, H_DEC  As Double = 1.20

' Text sizes (points)
Private Const PT_HDR As Integer = 18
Private Const PT_PROC As Integer = 16
Private Const PT_DEC As Integer = 18
Private Const PT_TERM As Integer = 18
Private Const PT_LABEL As Integer = 14
Private Const PT_CALLOUT As Integer = 12
Private Const PT_LEGEND As Integer = 12

' ========= ENTRY POINT =========
Public Sub GenerateBoth_LateBound()
    Dim app As Object, doc As Object
    Dim scopeID As Long, inScope As Boolean

    ' Host-aware startup (works inside Visio or from Excel/Word)
    Dim inVisio As Boolean
    On Error Resume Next
    inVisio = (Not Application Is Nothing)
    If inVisio Then inVisio = (Not Application.ActiveDocument Is Nothing)
    On Error GoTo 0

    If inVisio Then
        Set app = Application
    Else
        Set app = CreateObject("Visio.Application")
        app.Visible = True
    End If

    On Error Resume Next
    Set doc = app.ActiveDocument
    On Error GoTo 0
    If doc Is Nothing Then Set doc = app.Documents.Add("")

    ' Begin undo scope
    Err.Clear
    On Error Resume Next
    scopeID = app.BeginUndoScope("Generate Both Diagrams")
    inScope = (Err.Number = 0)
    Err.Clear
    On Error GoTo FAIL

    ' Build/reuse pages
    Dim pgWorkflow As Object, pgTimeline As Object
    Set pgWorkflow = EnsurePage(doc, "Workflow Swimlane")
    With pgWorkflow.PageSheet
        .CellsU("PageWidth").ResultIU = PAGE_W
        .CellsU("PageHeight").ResultIU = PAGE_H
        .CellsU("PrintPageOrientation").FormulaU = "1" ' portrait
        .CellsU("PrintCenterX").ResultIU = 0
        .CellsU("PrintCenterY").ResultIU = 0
        .CellsU("PrintGrid").FormulaU = "FALSE"
        .CellsU("PrintZoom").ResultIU = 1
    End With
    ' Clear existing shapes if page already existed
    SafeClearAll pgWorkflow
    DrawWorkflowSwimlane_LB pgWorkflow, app

    Set pgTimeline = EnsurePage(doc, "User Automation Timeline")
    With pgTimeline.PageSheet
        .CellsU("PageWidth").ResultIU = PAGE_W
        .CellsU("PageHeight").ResultIU = PAGE_H
        .CellsU("PrintPageOrientation").FormulaU = "1"
        .CellsU("PrintCenterX").ResultIU = 0
        .CellsU("PrintCenterY").ResultIU = 0
        .CellsU("PrintGrid").FormulaU = "FALSE"
        .CellsU("PrintZoom").ResultIU = 1
    End With
    SafeClearAll pgTimeline
    DrawUserAutomationTimeline_LB pgTimeline, app

CLEAN:
    If inScope Then
        On Error Resume Next
        app.EndUndoScope scopeID, True
        On Error GoTo 0
    End If
    If Not app.ActiveWindow Is Nothing Then app.ActiveWindow.ViewFit = VIS_FIT_PAGE
    Exit Sub

FAIL:
    If inScope Then
        On Error Resume Next
        app.EndUndoScope scopeID, False
        On Error GoTo 0
    End If
    Err.Raise Err.Number, Err.Source, Err.Description
End Sub

' ========= WORKFLOW (SWIMLANE) =========
Private Sub DrawWorkflowSwimlane_LB(pg As Object, app As Object)
    Dim lanes() As String
    lanes = Split("Requestor (User)|ServiceNow|Automation Platform|CMDB / Inventory|Approvers", "|")

    Dim steps() As StepDef
    ReDim steps(1 To 11)
    steps(1)  = StepRow("TERM", 1, 1, "Start", 1, False)
    steps(2)  = StepRow("PROC", 1, 2, "Submit VM Request", 2, False)
    steps(3)  = StepRow("PROC", 2, 2, "Validate Form & Policy", 3, False)
    steps(4)  = StepRow("DEC",  2, 3, "Approval Needed?", 4, False)
    steps(5)  = StepRow("PROC", 5, 3, "Review & Approve", 5, False)
    steps(6)  = StepRow("PROC", 2, 4, "Create Work Order", 6, False)
    steps(7)  = StepRow("PROC", 3, 4, "Provision VM", 7, True)
    steps(8)  = StepRow("PROC", 3, 5, "Assign IP / DNS", 8, True)
    steps(9)  = StepRow("PROC", 4, 5, "Create/Update CI & Relationships", 9, True)
    steps(10) = StepRow("PROC", 2, 5, "Notify Requestor", 10, False)
    steps(11) = StepRow("TERM", 1, 6, "End", 11, False)

    Dim conns() As ConnDef
    ReDim conns(1 To 11)
    conns(1)  = ConnRow(1, 2, "")
    conns(2)  = ConnRow(2, 3, "")
    conns(3)  = ConnRow(3, 4, "")
    conns(4)  = ConnRow(4, 5, "Yes")
    conns(5)  = ConnRow(4, 6, "No")
    conns(6)  = ConnRow(6, 7, "")
    conns(7)  = ConnRow(7, 8, "")
    conns(8)  = ConnRow(8, 9, "")
    conns(9)  = ConnRow(6, 10, "")
    conns(10) = ConnRow(10, 2, "Notify")
    conns(11) = ConnRow(2, 11, "")

    BuildSwimlanePage_LB pg, app, lanes, steps, conns
End Sub

' ========= TIMELINE =========
Private Sub DrawUserAutomationTimeline_LB(pg As Object, app As Object)
    Dim lanes() As String
    lanes = Split("Requestor (User)|System (SN + Platform)", "|")

    Dim steps() As StepDef
    ReDim steps(1 To 9)
    steps(1) = StepRow("PROC", 1, 1, "Submit Request", 1, False)
    steps(2) = StepRow("PROC", 2, 1, "Validate / Triage", 2, False)
    steps(3) = StepRow("DEC",  2, 2, "Approval Needed?", 3, False)
    steps(4) = StepRow("PROC", 1, 2, "Approve", 4, False)
    steps(5) = StepRow("PROC", 2, 2, "Provision VM", 5, True)
    steps(6) = StepRow("PROC", 2, 2, "Assign IP/DNS", 6, True)
    steps(7) = StepRow("PROC", 2, 2, "CMDB Update", 7, True)
    steps(8) = StepRow("PROC", 1, 2, "Notification", 8, False)
    steps(9) = StepRow("TERM", 1, 2, "End", 9, False)

    Dim conns() As ConnDef
    ReDim conns(1 To 8)
    conns(1) = ConnRow(1, 2, "")
    conns(2) = ConnRow(2, 3, "")
    conns(3) = ConnRow(3, 4, "Yes")
    conns(4) = ConnRow(3, 5, "No")
    conns(5) = ConnRow(5, 6, "")
    conns(6) = ConnRow(6, 7, "")
    conns(7) = ConnRow(7, 8, "Notify")
    conns(8) = ConnRow(8, 9, "")

    BuildTimelinePage_LB pg, app, lanes, steps, conns
End Sub

' ========= PAGE BUILDERS =========
Private Sub BuildSwimlanePage_LB(pg As Object, app As Object, lanes() As String, steps() As StepDef, conns() As ConnDef)
    Dim masters As Object: Set masters = LoadMasters_LB(app)

    Dim x0 As Double: x0 = MARGIN
    Dim y0 As Double: y0 = MARGIN
    Dim laneCount As Long: laneCount = UBound(lanes) - LBound(lanes) + 1
    Dim laneW As Double: laneW = CONTENT_W / laneCount
    Dim laneH As Double: laneH = CONTENT_H

    Dim i As Long
    For i = 1 To laneCount
        Dim lx As Double: lx = x0 + (i - 1) * laneW
        DrawLaneRect_LB pg, lx, y0, laneW, laneH, lanes(i - 1)
    Next i

    Dim idx As Long, minBottom As Double
    minBottom = 9999

    For idx = LBound(steps) To UBound(steps)
        Dim s As StepDef: s = steps(idx)
        Dim w As Double, h As Double: SizeByType s.SType, w, h
        Dim cx As Double: cx = x0 + (s.Lane - 1) * laneW + laneW / 2
        Dim topY As Double: topY = y0 + CONTENT_H - (LANE_HDR_H + HDR_GAP)
        Dim cy As Double: cy = topY - (s.Row - 1) * (h + V_GAP) - h / 2

        s.ShapeID = DropFlowShape_LB(pg, masters, s.SType, cx, cy, w, h, s.Caption, s.IsSystem)
        steps(idx) = s
        DrawCallout_LB pg, pg.Shapes.ItemFromID(s.ShapeID), CInt(s.Callout)

        ' Track lowest bottom Y
        Dim shp As Object: Set shp = pg.Shapes.ItemFromID(s.ShapeID)
        Dim b As Double: b = shp.CellsU("PinY").ResultIU - shp.CellsU("Height").ResultIU / 2
        If b < minBottom Then minBottom = b
    Next idx

    Dim c As Long
    For c = LBound(conns) To UBound(conns)
        Dim cd As ConnDef: cd = conns(c)
        Dim fi As Long: fi = cd.FromIndex
        Dim ti As Long: ti = cd.ToIndex
        If fi < LBound(steps) Or fi > UBound(steps) Then GoTo NextConn
        If ti < LBound(steps) Or ti > UBound(steps) Then GoTo NextConn

        Dim sFrom As Object, sTo As Object
        Set sFrom = pg.Shapes.ItemFromID(steps(fi).ShapeID)
        Set sTo = pg.Shapes.ItemFromID(steps(ti).ShapeID)
        Dim dc As Object: Set dc = pg.Drop(MasterGet(masters, "Dynamic connector"), 0, 0)
        GlueCenterToCenter_LB sFrom, sTo, dc
        If Len(cd.LabelText) > 0 Then DrawLabelTag_LB pg, dc, cd.LabelText, x0, y0
        dc.SendToBack
NextConn:
    Next c

    DrawLegend_LB pg, x0, y0, steps, minBottom
End Sub

Private Sub BuildTimelinePage_LB(pg As Object, app As Object, lanes() As String, steps() As StepDef, conns() As ConnDef)
    Dim masters As Object: Set masters = LoadMasters_LB(app)

    Dim x0 As Double: x0 = MARGIN
    Dim y0 As Double: y0 = MARGIN
    Dim laneW As Double: laneW = CONTENT_W

    Dim sep As Double: sep = IIf(TIMELINE_LANE_SEP < H_PROC + 0.8, H_PROC + 0.8, TIMELINE_LANE_SEP)
    Dim yHdr1 As Double: yHdr1 = y0 + CONTENT_H - LANE_HDR_H
    Dim yHdr2 As Double: yHdr2 = yHdr1 - (LANE_HDR_H + HDR_GAP + sep)
    DrawLaneHeader_LB pg, x0, yHdr1, laneW, LANE_HDR_H, lanes(0)
    DrawLaneHeader_LB pg, x0, yHdr2, laneW, LANE_HDR_H, lanes(1)

    Dim yReq As Double: yReq = yHdr1 - HDR_GAP - H_PROC / 2
    Dim ySys As Double: ySys = yHdr2 - HDR_GAP - H_PROC / 2

    Dim idx As Long, cx As Double: cx = x0 + 0.5
    Dim minBottom As Double: minBottom = 9999

    For idx = LBound(steps) To UBound(steps)
        Dim s As StepDef: s = steps(idx)
        Dim w As Double, h As Double: SizeByType s.SType, w, h
        Dim cy As Double
        If s.Lane = 1 Then
            cy = yReq
        Else
            If s.SType = "DEC" Then
                cy = ySys + (H_PROC - H_DEC) / 2
            Else
                cy = ySys
            End If
        End If

        Dim cxClamped As Double: cxClamped = cx
        If cxClamped + w / 2 > (x0 + CONTENT_W) Then cxClamped = x0 + CONTENT_W - w / 2

        s.ShapeID = DropFlowShape_LB(pg, masters, s.SType, cxClamped, cy, w, h, s.Caption, s.IsSystem)
        steps(idx) = s
        DrawCallout_LB pg, pg.Shapes.ItemFromID(s.ShapeID), CInt(s.Callout)

        ' Track lowest bottom Y
        Dim shp As Object: Set shp = pg.Shapes.ItemFromID(s.ShapeID)
        Dim b As Double: b = shp.CellsU("PinY").ResultIU - shp.CellsU("Height").ResultIU / 2
        If b < minBottom Then minBottom = b

        cx = cxClamped + w / 2 + H_GAP + w / 2
    Next idx

    Dim c As Long
    For c = LBound(conns) To UBound(conns)
        Dim cd As ConnDef: cd = conns(c)
        Dim fi As Long: fi = cd.FromIndex
        Dim ti As Long: ti = cd.ToIndex
        If fi < LBound(steps) Or fi > UBound(steps) Then GoTo NextConn2
        If ti < LBound(steps) Or ti > UBound(steps) Then GoTo NextConn2

        Dim sFrom As Object, sTo As Object
        Set sFrom = pg.Shapes.ItemFromID(steps(fi).ShapeID)
        Set sTo = pg.Shapes.ItemFromID(steps(ti).ShapeID)
        Dim dc As Object: Set dc = pg.Drop(MasterGet(masters, "Dynamic connector"), 0, 0)
        GlueCenterToCenter_LB sFrom, sTo, dc
        If Len(cd.LabelText) > 0 Then DrawLabelTag_LB pg, dc, cd.LabelText, x0, y0
        dc.SendToBack
NextConn2:
    Next c

    DrawLegend_LB pg, x0, y0, steps, minBottom
End Sub

' ========= STENCILS / MASTERS =========
Private Function LoadMasters_LB(app As Object) As Object
    Dim basic As Object, basAlt As Object, conn As Object

    On Error Resume Next
    Set basic = app.Documents("BASFLO_U.VSSX")
    If basic Is Nothing Then Set basic = app.Documents.OpenEx("BASFLO_U.VSSX", VIS_OPEN_RO)
    If basic Is Nothing Then
        Set basAlt = app.Documents("BASFLO_M.VSSX")
        If basAlt Is Nothing Then Set basAlt = app.Documents.OpenEx("BASFLO_M.VSSX", VIS_OPEN_RO)
        Set basic = basAlt
    End If
    Set conn = app.Documents("CONNEC_U.VSSX")
    If conn Is Nothing Then Set conn = app.Documents.OpenEx("CONNEC_U.VSSX", VIS_OPEN_RO)
    If conn Is Nothing Then Set conn = app.Documents.OpenEx("CONNEC_M.VSSX", VIS_OPEN_RO)
    On Error GoTo 0

    If basic Is Nothing Then Err.Raise vbObjectError + 1001, , "Basic Flowchart stencil not available."
    If conn Is Nothing Then Err.Raise vbObjectError + 1002, , "Connector stencil not available."

    ' Resolve masters by NameU with fallback
    Dim mProc As Object, mDec As Object, mTerm As Object, mDyn As Object
    Set mProc = GetMasterByNameU(basic, "Process")
    Set mDec  = GetMasterByNameU(basic, "Decision")
    Set mTerm = GetMasterByNameU(basic, "Terminator")
    Set mDyn  = GetMasterByNameU(conn,  "Dynamic connector", "Dynamic Connector")
    If mProc Is Nothing Or mDec Is Nothing Or mTerm Is Nothing Or mDyn Is Nothing Then
        Err.Raise vbObjectError + 1100, , "One or more required masters not found (Process/Decision/Terminator/Connector)."
    End If

    ' Prefer Dictionary; fall back to Collection if Scripting is blocked
    Dim col As Object
    On Error Resume Next
    Set col = CreateObject("Scripting.Dictionary")
    If Err.Number <> 0 Then
        Err.Clear
        Dim c As New Collection
        c.Add mProc, "Process"
        c.Add mDec,  "Decision"
        c.Add mTerm, "Terminator"
        c.Add mDyn,  "Dynamic connector"
        Set LoadMasters_LB = c
        Exit Function
    End If
    On Error GoTo 0

    col.Add "Process", mProc
    col.Add "Decision", mDec
    col.Add "Terminator", mTerm
    col.Add "Dynamic connector", mDyn
    Set LoadMasters_LB = col
End Function

Private Function GetMasterByNameU(doc As Object, ParamArray names()) As Object
    Dim i As Long, nm As String, m As Object
    On Error Resume Next
    For i = LBound(names) To UBound(names)
        nm = names(i)
        Set GetMasterByNameU = doc.Masters(nm)      ' try exact
        If Not GetMasterByNameU Is Nothing Then Exit Function
        For Each m In doc.Masters                    ' fallback by NameU
            If UCase$(m.NameU) = UCase$(nm) Then
                Set GetMasterByNameU = m
                Exit Function
            End If
        Next m
    Next i
    Set GetMasterByNameU = Nothing
End Function

Private Function MasterGet(masters As Object, key As String) As Object
    On Error Resume Next
    If TypeName(masters) = "Dictionary" Then
        Set MasterGet = masters(key)
    Else
        Set MasterGet = masters.Item(key)
    End If
End Function

' ========= DRAWING HELPERS =========
Private Sub SizeByType(ByVal sType As String, ByRef w As Double, ByRef h As Double)
    Select Case UCase$(sType)
        Case "PROC": w = W_PROC: h = H_PROC
        Case "DEC":  w = W_DEC:  h = H_DEC
        Case "TERM": w = W_TERM: h = H_TERM
        Case Else:   w = W_PROC: h = H_PROC
    End Select
End Sub

Private Function DropFlowShape_LB(pg As Object, masters As Object, ByVal sType As String, _
    ByVal cx As Double, ByVal cy As Double, ByVal w As Double, ByVal h As Double, _
    ByVal caption As String, ByVal isSystem As Boolean) As Long

    Dim shp As Object, key As String
    Select Case UCase$(sType)
        Case "PROC": key = "Process"
        Case "DEC":  key = "Decision"
        Case "TERM": key = "Terminator"
        Case Else:   key = "Process"
    End Select

    Set shp = pg.Drop(MasterGet(masters, key), cx, cy)
    shp.CellsU("Width").ResultIU = w
    shp.CellsU("Height").ResultIU = h
    shp.Text = caption

    ' Font and size
    SetFontSafe shp
    Select Case UCase$(sType)
        Case "PROC": shp.CellsU("Char.Size").Result("pt") = PT_PROC
        Case "DEC":  shp.CellsU("Char.Size").Result("pt") = PT_DEC
        Case "TERM": shp.CellsU("Char.Size").Result("pt") = PT_TERM
    End Select
    CenterText_LB shp

    ' Fill color
    If UCase$(sType) = "DEC" Then
        shp.CellsU("FillForegnd").FormulaU = "RGB(255,255,153)" ' yellow
    ElseIf UCase$(sType) = "TERM" Then
        shp.CellsU("FillForegnd").FormulaU = "RGB(217,217,217)" ' gray
    Else
        If isSystem Then
            shp.CellsU("FillForegnd").FormulaU = "RGB(183,227,183)" ' system green
        Else
            shp.CellsU("FillForegnd").FormulaU = "RGB(173,216,230)" ' process blue
        End If
    End If
    shp.CellsU("LineColor").FormulaU = "RGB(0,0,0)"
    shp.CellsU("LineWeight").ResultIU = 0.03

    DropFlowShape_LB = shp.ID
End Function

Private Sub DrawLaneRect_LB(pg As Object, x As Double, y As Double, w As Double, h As Double, hdr As String)
    Dim bg As Object
    Set bg = pg.DrawRectangle(x, y, x + w, y + h)
    bg.CellsU("FillForegnd").FormulaU = "RGB(243,243,243)"
    bg.CellsU("LineColor").FormulaU = "RGB(189,189,189)"
    bg.CellsU("LineWeight").ResultIU = 0.02

    Dim hy As Double: hy = y + h - LANE_HDR_H
    Dim band As Object
    Set band = pg.DrawRectangle(x, hy, x + w, hy + LANE_HDR_H)
    band.CellsU("FillForegnd").FormulaU = "RGB(224,224,224)"
    band.CellsU("LineColor").FormulaU = "RGB(189,189,189)"
    band.CellsU("LineWeight").ResultIU = 0.02
    band.Text = hdr
    SetFontSafe band
    band.CellsU("Char.Size").Result("pt") = PT_HDR
    CenterText_LB band
    band.BringToFront
End Sub

Private Sub DrawLaneHeader_LB(pg As Object, x As Double, y As Double, w As Double, h As Double, hdr As String)
    Dim r As Object
    Set r = pg.DrawRectangle(x, y, x + w, y + h)
    r.CellsU("FillForegnd").FormulaU = "RGB(224,224,224)"
    r.CellsU("LineColor").FormulaU = "RGB(189,189,189)"
    r.CellsU("LineWeight").ResultIU = 0.02
    r.Text = hdr
    SetFontSafe r
    r.CellsU("Char.Size").Result("pt") = PT_HDR
    CenterText_LB r
    r.BringToFront
End Sub

Private Sub DrawCallout_LB(pg As Object, host As Object, num As Integer)
    Dim r As Double: r = 0.2
    Dim off As Double: off = 0.1
    Dim cx As Double, cy As Double
    cx = host.CellsU("PinX").ResultIU - host.CellsU("Width").ResultIU / 2 + off + r
    cy = host.CellsU("PinY").ResultIU + host.CellsU("Height").ResultIU / 2 - off - r
    Dim el As Object
    Set el = pg.DrawOval(cx - r, cy - r, cx + r, cy + r)
    el.CellsU("FillForegnd").FormulaU = "RGB(255,255,255)"
    el.CellsU("LineColor").FormulaU = "RGB(0,0,0)"
    el.CellsU("LineWeight").ResultIU = 0.02
    el.Text = CStr(num)
    SetFontSafe el
    el.CellsU("Char.Size").Result("pt") = PT_CALLOUT
    CenterText_LB el
    el.BringToFront
End Sub

Private Sub GlueCenterToCenter_LB(sFrom As Object, sTo As Object, dc As Object)
    dc.CellsU("BeginX").GlueTo sFrom.CellsU("PinX")
    dc.CellsU("EndX").GlueTo sTo.CellsU("PinX")
    dc.CellsU("Rounding").ResultIU = 0
    dc.CellsU("LineWeight").ResultIU = 0.03
    dc.CellsU("LineColor").FormulaU = "RGB(0,0,0)"
    dc.CellsU("ConLineRouteExt").FormulaU = "1" ' right-angles
End Sub

Private Sub DrawLabelTag_LB(pg As Object, conn As Object, ByVal txt As String, ByVal x0 As Double, ByVal y0 As Double)
    Dim x As Double, y As Double
    On Error GoTo Fallback
    x = (conn.CellsU("Geometry.1.X1").ResultIU + conn.CellsU("Geometry.1.X2").ResultIU) / 2
    y = (conn.CellsU("Geometry.1.Y1").ResultIU + conn.CellsU("Geometry.1.Y2").ResultIU) / 2
    GoTo Place
Fallback:
    x = conn.CellsU("PinX").ResultIU
    y = conn.CellsU("PinY").ResultIU
Place:
    Dim w As Double: w = 0.45
    Dim h As Double: h = 0.24
    Dim tag As Object
    Set tag = pg.DrawRectangle(x - w / 2, y - h / 2, x + w / 2, y + h / 2)
    tag.CellsU("FillForegnd").FormulaU = "RGB(255,255,255)"
    tag.CellsU("LineColor").FormulaU = "RGB(0,0,0)"
    tag.CellsU("Rounding").ResultIU = 0.08
    SetFontSafe tag
    tag.CellsU("Char.Size").Result("pt") = PT_LABEL
    tag.Text = txt
    CenterText_LB tag

    ' Clamp X and Y inside content
    Dim leftB As Double:  leftB = x0
    Dim rightB As Double: rightB = x0 + CONTENT_W
    Dim topB As Double:   topB = y0
    Dim botB As Double:   botB = y0 + CONTENT_H
    If tag.CellsU("PinX").ResultIU < leftB + 0.25 Then tag.CellsU("PinX").ResultIU = leftB + 0.25
    If tag.CellsU("PinX").ResultIU > rightB - 0.25 Then tag.CellsU("PinX").ResultIU = rightB - 0.25
    If tag.CellsU("PinY").ResultIU < topB + 0.25 Then tag.CellsU("PinY").ResultIU = topB + 0.25
    If tag.CellsU("PinY").ResultIU > botB - 0.25 Then tag.CellsU("PinY").ResultIU = botB - 0.25

    tag.BringToFront
End Sub

Private Sub DrawLegend_LB(pg As Object, x0 As Double, y0 As Double, steps() As StepDef, ByVal minBottom As Double)
    ' Prefer below-flow position, but keep within page
    Dim top As Double
    top = minBottom - 0.30
    Dim bottomAnchor As Double: bottomAnchor = y0 + 0.60
    If top < bottomAnchor Then top = bottomAnchor
    If top + 1.6 > (y0 + CONTENT_H - 0.10) Then top = (y0 + CONTENT_H - 0.10) - 1.6

    Dim r As Object
    Set r = pg.DrawRectangle(x0, top, x0 + CONTENT_W, top + 1.6)
    r.CellsU("FillForegnd").FormulaU = "RGB(255,255,255)"
    r.CellsU("LineColor").FormulaU = "RGB(0,0,0)"
    r.CellsU("LineWeight").ResultIU = 0.01
    SetFontSafe r
    r.CellsU("Char.Size").Result("pt") = PT_LEGEND
    r.CellsU("Para.HorzAlign").FormulaU = "0"
    r.Text = "Callout Table:" & vbCrLf & LegendLines_LB(steps)
    r.BringToFront
End Sub

Private Function LegendLines_LB(steps() As StepDef) As String
    Dim i As Long, s As String
    For i = LBound(steps) To UBound(steps)
        s = s & steps(i).Callout & "  " & LegendShort_LB(steps(i).Caption) & " — " & LegendLong_LB(steps(i).Caption) & vbCrLf
    Next i
    LegendLines_LB = s
End Function

Private Function LegendShort_LB(full As String) As String
    Dim m As String: m = full
    m = Replace(m, "Create/Update CI & Relationships", "CMDB")
    m = Replace(m, "Assign IP / DNS", "IP/DNS")
    LegendShort_LB = m
End Function

Private Function LegendLong_LB(full As String) As String
    Select Case full
        Case "Start": LegendLong_LB = "User initiates request"
        Case "Submit VM Request": LegendLong_LB = "Submit VM request in portal"
        Case "Validate Form & Policy": LegendLong_LB = "SN validates form and policy"
        Case "Approval Needed?": LegendLong_LB = "Approval required?"
        Case "Review & Approve": LegendLong_LB = "Approver reviews & approves"
        Case "Create Work Order": LegendLong_LB = "SN creates work order"
        Case "Provision VM": LegendLong_LB = "Platform provisions VM"
        Case "Assign IP / DNS": LegendLong_LB = "Assign IP and DNS"
        Case "Create/Update CI & Relationships": LegendLong_LB = "Create/update CI/relationships"
        Case "Notify Requestor": LegendLong_LB = "Notify requestor of completion"
        Case "End": LegendLong_LB = "Process ends"
        Case "Submit Request": LegendLong_LB = "User submits request"
        Case "Validate / Triage": LegendLong_LB = "System validates/triages the request"
        Case "Approve": LegendLong_LB = "User approves (if required)"
        Case "Assign IP/DNS": LegendLong_LB = "Assign IP and DNS"
        Case "CMDB Update": LegendLong_LB = "Update CMDB / relationships"
        Case "Notification": LegendLong_LB = "System notifies requestor"
        Case Else: LegendLong_LB = full
    End Select
End Function

Private Sub CenterText_LB(shp As Object)
    shp.CellsU("Para.HorzAlign").FormulaU = "1"
    shp.CellsU("VerticalAlign").FormulaU = "1"
End Sub

Private Sub SetFontSafe(shp As Object)
    On Error Resume Next
    shp.CellsU("Char.Font").FormulaU = "FONT(""Arial"")"
    If Err.Number <> 0 Then
        Err.Clear
        shp.CellsU("Char.Font").FormulaU = "FONT(""Calibri"")"
    End If
End Sub

' ==== Simple constructors ====
Private Function StepRow(t As String, laneIdx As Integer, rowIdx As Integer, txt As String, callNum As Integer, isSys As Boolean) As StepDef
    Dim s As StepDef
    s.SType = UCase$(t)
    s.Lane = laneIdx
    s.Row = rowIdx
    s.Caption = txt
    s.Callout = callNum
    s.IsSystem = isSys
    StepRow = s
End Function

Private Function ConnRow(f As Integer, t As Integer, lbl As String) As ConnDef
    Dim c As ConnDef
    c.FromIndex = f
    c.ToIndex = t
    c.LabelText = lbl
    ConnRow = c
End Function

' ==== Utilities ====
Private Function EnsurePage(doc As Object, name As String) As Object
    Dim p As Object
    For Each p In doc.Pages
        If UCase$(p.Name) = UCase$(name) Then
            Set EnsurePage = p
            Exit Function
        End If
    Next
    Set EnsurePage = doc.Pages.Add
    EnsurePage.Name = name
End Function

Private Sub SafeClearAll(pg As Object)
    On Error Resume Next
    Dim shp As Object
    For Each shp In pg.Shapes
        shp.Delete
    Next
    On Error GoTo 0
End Sub
